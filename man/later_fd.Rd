% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/later.R
\name{later_fd}
\alias{later_fd}
\title{Executes a function when a file descriptor is ready}
\usage{
later_fd(
  func,
  readfds = integer(),
  writefds = integer(),
  exceptfds = integer(),
  timeout = Inf,
  loop = current_loop()
)
}
\arguments{
\item{func}{A function that takes a single argument, a logical vector that
indicates which file descriptors are ready (a concatenation of \code{readfds},
\code{writefds} and \code{exceptfds}). This may be all \code{FALSE} if the
\code{timeout} argument is non-\code{Inf}. Invalid file descriptors and those with
activity other than the monitored type will be returned as \code{NA}.}

\item{readfds}{Integer vector of file descriptors, or Windows \code{SOCKET}s to
monitor for read activity.}

\item{writefds}{Integer vector of file descriptors, or Windows \code{SOCKET}s to
monitor for write activity.}

\item{exceptfds}{Integer vector of file descriptors, or Windows \code{SOCKET}s to
monitor for exceptions / errors.}

\item{timeout}{Number of seconds to wait before giving up, and calling \code{func}
with all \code{FALSE}.}

\item{loop}{A handle to an event loop. Defaults to the currently-active loop.}
}
\value{
A function, which, if invoked, will cancel the callback. The
function will return \code{TRUE} if the callback was successfully
cancelled and \code{FALSE} if not (this occurs if the callback has
executed or has been cancelled already).
}
\description{
Executes a function when a file descriptor is ready
}
\examples{
\dontshow{if (requireNamespace("nanonext", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# create nanonext socket
s1 <- nanonext::socket(listen = "inproc://nano")
s2 <- nanonext::socket(dial = "inproc://nano")
fd1 <- nanonext::opt(s1, "recv-fd")
fd2 <- nanonext::opt(s2, "recv-fd")

# 1. timeout: prints FALSE, FALSE
later_fd(print, c(fd1, fd2), timeout = 0.1)
Sys.sleep(0.2)
run_now()

# 2. fd1 active: prints TRUE, FALSE
later_fd(print, c(fd1, fd2), timeout = 1)
res <- nanonext::send(s2, "msg")
Sys.sleep(0.1)
run_now()

# 3. both active: prints TRUE, TRUE
res <- nanonext::send(s1, "msg")
later_fd(print, c(fd1, fd2), timeout = 1)
Sys.sleep(0.1)
run_now()

# 4. fd2 active: prints FALSE, TRUE
res <- nanonext::recv(s1)
later_fd(print, c(fd1, fd2), timeout = 1)
Sys.sleep(0.1)
run_now()

# 5. fds invalid: prints NA, NA
close(s2)
close(s1)
later_fd(print, c(fd1, fd2), timeout = 1)
Sys.sleep(0.1)
run_now()
\dontshow{\}) # examplesIf}
}
