[{"path":[]},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://later.r-lib.org/dev/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://later.r-lib.org/dev/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 later authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://later.r-lib.org/dev/articles/later-cpp.html","id":"using-later-from-c","dir":"Articles","previous_headings":"","what":"Using later from C++","title":"Using later from C++","text":"can call later::later C++ code packages, cause C-style functions called back. safe call either main R thread different thread; cases, callback invoked main R thread. use C++ interface, ’ll need : Add later DESCRIPTION file, LinkingTo Imports Make sure NAMESPACE file import(later) entry. package uses roxygen2, can adding following lines file R/: Add #include <later_api.h> top C++ file uses APIs.","code":"#' @import later NULL"},{"path":"https://later.r-lib.org/dev/articles/later-cpp.html","id":"executing-a-c-function-later","dir":"Articles","previous_headings":"Using later from C++","what":"Executing a C function later","title":"Using later from C++","text":"later::later function accessible later_api.h prototype looks like : first argument pointer function takes one void* argument returns void. second argument void* passed function ’s called back. third argument number seconds wait (minimum) invoking. cases, function invoked R thread, user R code executing.","code":"void later(void (*func)(void*), void* data, double secs)"},{"path":"https://later.r-lib.org/dev/articles/later-cpp.html","id":"background-tasks","dir":"Articles","previous_headings":"Using later from C++","what":"Background tasks","title":"Using later from C++","text":"package also offers higher-level C++ helper class called later::BackgroundTask, make easier execute tasks background thread. takes care launching background thread , returning control back R thread later point; ’re responsible providing actual code executes background thread, well code executes R thread background task completes. public/protected interface looks like : Create subclass, implementing custom constructor plus execute complete methods. ’s critical code execute method mutate R data structures, call R code, cause R allocations, execute background thread operations unsafe. can, however, perform operations constructor (assuming perform construction main R thread) complete method. Pass values constructor methods using fields. run task, new subclass call begin(), e.g. (new MyTask(vec))->begin(). ’s need keep track pointer; task object delete task complete. ’s useful execute tasks background threads can’t get access results back R. ’ll soon introducing complementary R package provides suitable “promise” “future” abstraction.","code":"class BackgroundTask {  public:   BackgroundTask();   virtual ~BackgroundTask();    // Start executing the task     void begin();  protected:   // The task to be executed on the background thread.   // Neither the R runtime nor any R data structures may be   // touched from the background thread; any values that need   // to be passed into or out of the Execute method must be   // included as fields on the Task subclass object.   virtual void execute() = 0;      // A short task that runs on the main R thread after the   // background task has completed. It's safe to access the   // R runtime and R data structures from here.   virtual void complete() = 0; } #include <Rcpp.h> #include <later_api.h>  class MyTask : public later::BackgroundTask { public:   MyTask(Rcpp::NumericVector vec) :     inputVals(Rcpp::as<std::vector<double> >(vec)) {   }  protected:   void execute() {     double sum = 0;     for (std::vector<double>::const_iterator it = inputVals.begin();       it != inputVals.end();       it++) {              sum += *it;     }     result = sum / inputVals.size();   }      void complete() {     Rprintf(\"Result is %f\\n\", result);   }  private:   std::vector<double> inputVals;   double result; }; // [[Rcpp::export]] void asyncMean(Rcpp::NumericVector data) {   (new MyTask(data))->begin(); }"},{"path":"https://later.r-lib.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Winston Chang. Author. Joe Cheng. Author. Charlie Gao. Author, maintainer. . Copyright holder, funder. Marcus Geelnard. Contributor, copyright holder.           TinyCThread library, https://tinycthread.github.io/ Evan Nemerson. Contributor, copyright holder.           TinyCThread library, https://tinycthread.github.io/","code":""},{"path":"https://later.r-lib.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chang W, Cheng J, Gao C (2025). later: Utilities Scheduling Functions Execute Later Event Loops. R package version 1.4.2.9000, https://later.r-lib.org.","code":"@Manual{,   title = {later: Utilities for Scheduling Functions to Execute Later with Event Loops},   author = {Winston Chang and Joe Cheng and Charlie Gao},   year = {2025},   note = {R package version 1.4.2.9000},   url = {https://later.r-lib.org}, }"},{"path":"https://later.r-lib.org/dev/index.html","id":"later","dir":"","previous_headings":"","what":"Utilities for Scheduling Functions to Execute Later with Event Loops","title":"Utilities for Scheduling Functions to Execute Later with Event Loops","text":"Schedule R function formula run specified period time. Similar JavaScript’s setTimeout function. Like JavaScript, R single-threaded ’s guarantee operation run exactly requested time, least much time elapse. avoid bugs due reentrancy, default, scheduled operations run R code present execution stack; .e., R sitting top-level prompt. can force past-due operations run time choosing calling later::run_now(). mechanism used package inspired Simon Urbanek’s background package similar code Rhttpd.","code":""},{"path":"https://later.r-lib.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Utilities for Scheduling Functions to Execute Later with Event Loops","text":"can install development version later :","code":"pak::pak(\"r-lib/later\")"},{"path":"https://later.r-lib.org/dev/index.html","id":"usage-from-r","dir":"","previous_headings":"","what":"Usage from R","title":"Utilities for Scheduling Functions to Execute Later with Event Loops","text":"Pass function (case, delayed 5 seconds): formula (case, run soon control returns top-level):","code":"later::later(\\() print(\"Got here!\"), 5) later::later(~print(\"Got here!\"))"},{"path":"https://later.r-lib.org/dev/index.html","id":"file-descriptor-readiness","dir":"","previous_headings":"Usage from R","what":"File Descriptor Readiness","title":"Utilities for Scheduling Functions to Execute Later with Event Loops","text":"also possible function run based file descriptors ready reading writing, indeterminate time future. , logical vector printed indicating file descriptors 21 22 ready, subject timeout 1s. useful particular asynchronous /O, allowing reads made TCP sockets soon data becomes available. Functions curl::multi_fdset() return relevant file descriptors monitored.","code":"later::later_fd(\\(x) print(x), c(21L, 22L), timeout = 1)"},{"path":"https://later.r-lib.org/dev/index.html","id":"usage-from-c","dir":"","previous_headings":"","what":"Usage from C++","title":"Utilities for Scheduling Functions to Execute Later with Event Loops","text":"can also call later::later C++ code packages, cause C-style functions called back. safe call either main R thread different thread; cases, callback invoked main R thread. later::later accessible later_api.h prototype looks like : first argument pointer function takes one void* argument returns void. second argument void* passed function ’s called back. third argument number seconds wait (minimum) invoking. later::later_fd also accessible later_api.h prototype looks like : first argument pointer function takes two arguments: first int* array provided later_fd() called back, second void*. int* array length num_fds contain values 0, 1 NA_INTEGER indicate readiness file descriptor, error condition respectively. second argument data passed void* argument function ’s called back. required arguments total number file descriptors, pointer array stuct pollfd, number seconds wait timing . use C++ interface, ’ll need add later DESCRIPTION file LinkingTo Imports, also make sure NAMESPACE file import(later) entry.","code":"void later(void (*func)(void*), void* data, double secs) void later_fd(void (*func)(int *, void *), void *data, int num_fds, struct pollfd *fds, double secs)"},{"path":"https://later.r-lib.org/dev/index.html","id":"background-tasks","dir":"","previous_headings":"Usage from C++","what":"Background tasks","title":"Utilities for Scheduling Functions to Execute Later with Event Loops","text":"Finally, package also offers higher-level C++ helper class make easier execute tasks background thread. also available later_api.h public/protected interface looks like : Create subclass, implementing custom constructor plus execute complete methods. ’s critical code execute method mutate R data structures, call R code, cause R allocations, execute background thread operations unsafe. can, however, perform operations constructor (assuming perform construction main R thread) complete method. Pass values constructor methods using fields. run task, new subclass call begin(), e.g. (new MyTask(vec))->begin(). ’s need keep track pointer; task object delete task complete. ’s useful execute tasks background threads can’t get access results back R. promises package complements later providing “promise” abstraction.","code":"class BackgroundTask {  public:   BackgroundTask();   virtual ~BackgroundTask();    // Start executing the task   void begin();  protected:   // The task to be executed on the background thread.   // Neither the R runtime nor any R data structures may be   // touched from the background thread; any values that need   // to be passed into or out of the Execute method must be   // included as fields on the Task subclass object.   virtual void execute() = 0;    // A short task that runs on the main R thread after the   // background task has completed. It's safe to access the   // R runtime and R data structures from here.   virtual void complete() = 0; } #include <Rcpp.h> #include <later_api.h>  class MyTask : public later::BackgroundTask { public:   MyTask(Rcpp::NumericVector vec) :     inputVals(Rcpp::as<std::vector<double> >(vec)) {   }  protected:   void execute() {     double sum = 0;     for (std::vector<double>::const_iterator it = inputVals.begin();       it != inputVals.end();       it++) {        sum += *it;     }     result = sum / inputVals.size();   }    void complete() {     Rprintf(\"Result is %f\\n\", result);   }  private:   std::vector<double> inputVals;   double result; }; // [[Rcpp::export]] void asyncMean(Rcpp::NumericVector data) {   (new MyTask(data))->begin(); }"},{"path":"https://later.r-lib.org/dev/reference/create_loop.html","id":null,"dir":"Reference","previous_headings":"","what":"Private event loops — create_loop","title":"Private event loops — create_loop","text":"Normally, later uses global event loop scheduling running functions. However, cases, useful create private event loop schedule execute tasks without disturbing global event loop. example, might asynchronous code queries remote data source, want wait full back--forth communication complete continuing code – caller's perspective, behave like synchronous code, anything global event loop (run code unrelated operation). , run asynchronous code using private event loop.","code":""},{"path":"https://later.r-lib.org/dev/reference/create_loop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Private event loops — create_loop","text":"","code":"create_loop(parent = current_loop())  destroy_loop(loop)  exists_loop(loop)  current_loop()  with_temp_loop(expr)  with_loop(loop, expr)  global_loop()"},{"path":"https://later.r-lib.org/dev/reference/create_loop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Private event loops — create_loop","text":"parent parent event loop one created. Whenever parent loop runs, loop also automatically run, without manually call run_now() loop. NULL, loop parent event loop automatically runs ; way run loop calling run_now() loop. loop handle event loop. expr expression evaluate.","code":""},{"path":"https://later.r-lib.org/dev/reference/create_loop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Private event loops — create_loop","text":"create_loop creates returns handle private event loop, useful scheduling tasks want interfere global event loop. destroy_loop destroys private event loop. exists_loop reports whether event loop exists – , destroyed. current_loop returns currently-active event loop. calls later() run_now() use current loop default. with_loop evaluates expression given event loop currently-active loop. with_temp_loop creates event loop, makes current loop, evaluates given expression. Afterwards, new event loop destroyed. global_loop returns handle global event loop.","code":""},{"path":"https://later.r-lib.org/dev/reference/later-package.html","id":null,"dir":"Reference","previous_headings":"","what":"later: Utilities for Scheduling Functions to Execute Later with Event Loops — later-package","title":"later: Utilities for Scheduling Functions to Execute Later with Event Loops — later-package","text":"Executes arbitrary R C functions time current time, R execution stack emptied. functions scheduled event loop.","code":""},{"path":[]},{"path":"https://later.r-lib.org/dev/reference/later-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"later: Utilities for Scheduling Functions to Execute Later with Event Loops — later-package","text":"Maintainer: Charlie Gao charlie.gao@posit.co (ORCID) Authors: Winston Chang winston@posit.co Joe Cheng joe@posit.co contributors: Posit Software, PBC (03wc8by49) [copyright holder, funder] Marcus Geelnard (TinyCThread library, https://tinycthread.github.io/) [contributor, copyright holder] Evan Nemerson (TinyCThread library, https://tinycthread.github.io/) [contributor, copyright holder]","code":""},{"path":"https://later.r-lib.org/dev/reference/later.html","id":null,"dir":"Reference","previous_headings":"","what":"Executes a function later — later","title":"Executes a function later — later","text":"Schedule R function formula run specified period time. Similar JavaScript's setTimeout function. Like JavaScript, R single-threaded guarantee operation run exactly requested time, least much time elapse.","code":""},{"path":"https://later.r-lib.org/dev/reference/later.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Executes a function later — later","text":"","code":"later(func, delay = 0, loop = current_loop())"},{"path":"https://later.r-lib.org/dev/reference/later.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Executes a function later — later","text":"func function formula (see rlang::as_function()). delay Number seconds future delay execution. guarantee function executed desired time, execute earlier. loop handle event loop. Defaults currently-active loop.","code":""},{"path":"https://later.r-lib.org/dev/reference/later.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Executes a function later — later","text":"function, , invoked, cancel callback. function return TRUE callback successfully cancelled FALSE (occurs callback executed cancelled already).","code":""},{"path":"https://later.r-lib.org/dev/reference/later.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Executes a function later — later","text":"mechanism used package inspired Simon Urbanek's background package similar code Rhttpd.","code":""},{"path":"https://later.r-lib.org/dev/reference/later.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Executes a function later — later","text":"avoid bugs due reentrancy, default, scheduled operations run R code present execution stack; .e., R sitting top-level prompt. can force past-due operations run time choosing calling run_now(). Error handling particularly well-defined may change future. options(error=browser) work errors func generally crash R process, much else can said point. must specific behavior occur face errors, put error handling logic inside func.","code":""},{"path":"https://later.r-lib.org/dev/reference/later.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Executes a function later — later","text":"","code":"# Example of formula style later(~cat(\"Hello from the past\\n\"), 3)  # Example of function style later(function() {   print(summary(cars)) }, 2)"},{"path":"https://later.r-lib.org/dev/reference/later_fd.html","id":null,"dir":"Reference","previous_headings":"","what":"Executes a function when a file descriptor is ready — later_fd","title":"Executes a function when a file descriptor is ready — later_fd","text":"Schedule R function formula run indeterminate amount time file descriptors ready reading writing, subject optional timeout.","code":""},{"path":"https://later.r-lib.org/dev/reference/later_fd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Executes a function when a file descriptor is ready — later_fd","text":"","code":"later_fd(   func,   readfds = integer(),   writefds = integer(),   exceptfds = integer(),   timeout = Inf,   loop = current_loop() )"},{"path":"https://later.r-lib.org/dev/reference/later_fd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Executes a function when a file descriptor is ready — later_fd","text":"func function takes single argument, logical vector indicates file descriptors ready (concatenation readfds, writefds exceptfds). may FALSE timeout argument non-Inf. File descriptors error conditions pending represented NA, invalid file descriptors already closed. readfds Integer vector file descriptors, Windows SOCKETs, monitor ready read. writefds Integer vector file descriptors, Windows SOCKETs, monitor ready write. exceptfds Integer vector file descriptors, Windows SOCKETs, monitor error conditions pending. timeout Number seconds wait giving , calling func FALSE. default Inf implies waiting indefinitely. Specifying 0 check without blocking, supplying negative value defaults timeout 1s. loop handle event loop. Defaults currently-active loop.","code":""},{"path":"https://later.r-lib.org/dev/reference/later_fd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Executes a function when a file descriptor is ready — later_fd","text":"function, , invoked, cancel callback. function return TRUE callback successfully cancelled FALSE (occurs callback executed cancelled already).","code":""},{"path":"https://later.r-lib.org/dev/reference/later_fd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Executes a function when a file descriptor is ready — later_fd","text":"occasion system-level poll (Windows WSAPoll) returns error, callback made vector NAs. indistinguishable case poll succeeds error conditions pending file descriptor. file descriptors supplied, callback scheduled immediate execution made empty logical vector logical(0).","code":""},{"path":"https://later.r-lib.org/dev/reference/later_fd.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Executes a function when a file descriptor is ready — later_fd","text":"avoid bugs due reentrancy, default, scheduled operations run R code present execution stack; .e., R sitting top-level prompt. can force past-due operations run time choosing calling run_now(). Error handling particularly well-defined may change future. options(error=browser) work errors func generally crash R process, much else can said point. must specific behavior occur face errors, put error handling logic inside func.","code":""},{"path":"https://later.r-lib.org/dev/reference/later_fd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Executes a function when a file descriptor is ready — later_fd","text":"","code":"# create nanonext sockets s1 <- nanonext::socket(listen = \"inproc://nano\") s2 <- nanonext::socket(dial = \"inproc://nano\") fd1 <- nanonext::opt(s1, \"recv-fd\") fd2 <- nanonext::opt(s2, \"recv-fd\")  # 1. timeout: prints FALSE, FALSE later_fd(print, c(fd1, fd2), timeout = 0.1) Sys.sleep(0.2) run_now() #> [1] FALSE FALSE  # 2. fd1 ready: prints TRUE, FALSE later_fd(print, c(fd1, fd2), timeout = 1) res <- nanonext::send(s2, \"msg\") Sys.sleep(0.1) run_now() #> [1]  TRUE FALSE  # 3. both ready: prints TRUE, TRUE res <- nanonext::send(s1, \"msg\") later_fd(print, c(fd1, fd2), timeout = 1) Sys.sleep(0.1) run_now() #> [1] TRUE TRUE  # 4. fd2 ready: prints FALSE, TRUE res <- nanonext::recv(s1) later_fd(print, c(fd1, fd2), timeout = 1) Sys.sleep(0.1) run_now() #> [1] FALSE  TRUE  # 5. fds invalid: prints NA, NA close(s2) close(s1) later_fd(print, c(fd1, fd2), timeout = 0) Sys.sleep(0.1) run_now() #> [1] NA NA"},{"path":"https://later.r-lib.org/dev/reference/list_queue.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the contents of an event loop, as a list — list_queue","title":"Get the contents of an event loop, as a list — list_queue","text":"function debugging .","code":""},{"path":"https://later.r-lib.org/dev/reference/list_queue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the contents of an event loop, as a list — list_queue","text":"","code":"list_queue(loop = current_loop())"},{"path":"https://later.r-lib.org/dev/reference/logLevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get and set logging level — logLevel","title":"Get and set logging level — logLevel","text":"logging level later can set report differing levels information. Possible logging levels (least information reported) : \"\", \"ERROR\", \"WARN\", \"INFO\", \"DEBUG\". default level ERROR.","code":""},{"path":"https://later.r-lib.org/dev/reference/logLevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get and set logging level — logLevel","text":"","code":"logLevel(level = NULL)"},{"path":"https://later.r-lib.org/dev/reference/logLevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get and set logging level — logLevel","text":"level logging level. Must one NULL, \"\", \"ERROR\", \"WARN\", \"INFO\", \"DEBUG\". NULL (default), function simply returns current logging level.","code":""},{"path":"https://later.r-lib.org/dev/reference/logLevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get and set logging level — logLevel","text":"level=NULL, returns current logging level. level value, returns previous logging level, set new value.","code":""},{"path":"https://later.r-lib.org/dev/reference/loop_empty.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if later loop is empty — loop_empty","title":"Check if later loop is empty — loop_empty","text":"Returns true currently callbacks scheduled execute present future.","code":""},{"path":"https://later.r-lib.org/dev/reference/loop_empty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if later loop is empty — loop_empty","text":"","code":"loop_empty(loop = current_loop())"},{"path":"https://later.r-lib.org/dev/reference/loop_empty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if later loop is empty — loop_empty","text":"loop handle event loop.","code":""},{"path":"https://later.r-lib.org/dev/reference/next_op_secs.html","id":null,"dir":"Reference","previous_headings":"","what":"Relative time to next scheduled operation — next_op_secs","title":"Relative time to next scheduled operation — next_op_secs","text":"Returns duration now earliest operation currently scheduled, seconds. operation past, value negative. operation currently scheduled, value Inf.","code":""},{"path":"https://later.r-lib.org/dev/reference/next_op_secs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Relative time to next scheduled operation — next_op_secs","text":"","code":"next_op_secs(loop = current_loop())"},{"path":"https://later.r-lib.org/dev/reference/next_op_secs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Relative time to next scheduled operation — next_op_secs","text":"loop handle event loop.","code":""},{"path":"https://later.r-lib.org/dev/reference/run_now.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute scheduled operations — run_now","title":"Execute scheduled operations — run_now","text":"Normally, operations scheduled later() execute unless/R code stack (.e. top-level). need run blocking R code long time want allow scheduled operations run well-defined points operation, can call run_now() points operations due run .","code":""},{"path":"https://later.r-lib.org/dev/reference/run_now.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute scheduled operations — run_now","text":"","code":"run_now(timeoutSecs = 0L, all = TRUE, loop = current_loop())"},{"path":"https://later.r-lib.org/dev/reference/run_now.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute scheduled operations — run_now","text":"timeoutSecs Wait (block) number seconds waiting operation ready run. 0, return immediately operations ready run. Inf negative, wait long takes (none scheduled, block forever). FALSE, run_now() execute one scheduled operation (instead eligible operations). can useful cases want interleave scheduled operations logic. loop handle event loop. Defaults currently-active loop.","code":""},{"path":"https://later.r-lib.org/dev/reference/run_now.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute scheduled operations — run_now","text":"logical indicating whether callbacks actually run.","code":""},{"path":"https://later.r-lib.org/dev/reference/run_now.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute scheduled operations — run_now","text":"one callbacks throws error, error caught, subsequent callbacks executed (run_now() called , control returns R prompt). must use tryCatch want handle errors.","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-development-version","dir":"Changelog","previous_headings":"","what":"later (development version)","title":"later (development version)","text":"Fixed #215: autorun argument create_loop(), long deprecated, removed (#222). Fixed #167: .Random.seed longer affected package loaded (#220). Set file-level variables static avoid triggering -Wmissing-variable-declarations (@michaelchirico, #163).","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-142","dir":"Changelog","previous_headings":"","what":"later 1.4.2","title":"later 1.4.2","text":"CRAN release: 2025-04-08 Fixed #208: Fixed keyword hidden macro definition compiler warning using C23 compiler. (@shikokuchuo, #209)","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-141","dir":"Changelog","previous_headings":"","what":"later 1.4.1","title":"later 1.4.1","text":"CRAN release: 2024-11-27 Fixed #203: Resolves issue packages LinkingTo: later (including promises httpuv) built later 1.4.0, fail load systems actually older versions later installed, erroring message “function ‘execLaterFdNative’ provided package ‘later’”. fix, dependent packages gracefully deal older versions load time, complain helpful error messages newer C interfaces (available installed later) accessed. (#204)","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-140","dir":"Changelog","previous_headings":"","what":"later 1.4.0","title":"later 1.4.0","text":"CRAN release: 2024-11-26 Adds later_fd() executes function file descriptor ready reading writing, indeterminate time future (subject optional timeout). facilitates event-driven approach asynchronous streaming downloads. (@shikokuchuo @jcheng5, #190) Fixed #186: Improvements package load time rlang now loaded used. notable efficiency packages ‘linking ’ dependency later. Also updates native symbol registration dynamic lookup. (@shikokuchuo @wch, #187) Fixed #191: Errors raised later callbacks re-thrown generic C++ std::runtime_error Rcpp >= 1.0.10 (since 2022!). (@shikokuchuo @lionel-, #192)","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-132","dir":"Changelog","previous_headings":"","what":"later 1.3.2","title":"later 1.3.2","text":"CRAN release: 2023-12-06 Fixed unused variable compiler warning. (@MichaelChirico, #176) Fixed #177: order includes later.h cause compilation errors platforms. (@jeroen, #178) Closed #181: Fix R CMD check warning re error() format strings (r-devel). (#133)","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-131","dir":"Changelog","previous_headings":"","what":"later 1.3.1","title":"later 1.3.1","text":"CRAN release: 2023-05-02 C function declarations take parameters, added void parameter. (#172)","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-130","dir":"Changelog","previous_headings":"","what":"later 1.3.0","title":"later 1.3.0","text":"CRAN release: 2021-08-18 Closed #148: later attached, parallel::makeForkCluster() fail. (#149) Fixed #150: possible callbacks execute wrong order clock time changed scheduling two callbacks. (#151)","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-120","dir":"Changelog","previous_headings":"","what":"later 1.2.0","title":"later 1.2.0","text":"CRAN release: 2021-04-23 Closed #138: later now licensed MIT. (#139) Closed #140: Previously, event loop stopped running R process forked. (#141) Closed #143: Packages link later longer need take direct dependency Rcpp, later.h longer includes Rcpp.h. (#144) Removed dependency BH package. C++11 now required. (#147)","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-1101","dir":"Changelog","previous_headings":"","what":"later 1.1.0.1","title":"later 1.1.0.1","text":"CRAN release: 2020-06-05 Private event loops now automatically run parent. , whenever event loop run, children event loops automatically run. create_loop() function new parameter parent, defaults current loop. auto-running behavior can disabled using create_loop(parent=NULL). (#119) Fixed #73, #109: Previously, later build platforms, notably ARM, -latomic linker needed platforms. configure script now detects -latomic needed. (#114) Previously, execLaterNative initialized package loaded, execLaterNative2, resulting warning message cases. (#116)","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-100","dir":"Changelog","previous_headings":"","what":"later 1.0.0","title":"later 1.0.0","text":"CRAN release: 2019-10-04 Added private event loops: event loops can run independently global event loop. useful code schedules callbacks later(), want call run_now() block wait callbacks execute continuing. Without private event loops, call run_now() wait particular callback finished, might inadvertantly run callbacks scheduled code. private event loops, can create private loop, schedule callback , call run_now() loop executes, without interfering global loop. (#84)","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-080","dir":"Changelog","previous_headings":"","what":"later 0.8.0","title":"later 0.8.0","text":"CRAN release: 2019-02-11 Fixed issue #77: platforms, system’s C library support C11-style threads, threads.h header file. case, later’s configure script tried use tinycthread, upon linking, function name conflicts tinycthread system’s C library. Later longer tries use system’s threads.h, functions tinycthread renamed accidentally link system C library’s C11-style thread functions. PR #79 Added argument run_now(); defaults TRUE, set FALSE, run_now run one later operation returning. PR #75 Fixed issue #74: Using later R terminal POSIX cause 100% CPU. caused later accidentally provoking R call input handler continuously. PR #76 Fixed issue #73: Linking later ARM failed boost::atomic requires -lboost_atomic flag. Now later tries use std::atomic available (compiler supports C++11), falls back boost::atomic . PR #80","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-075","dir":"Changelog","previous_headings":"","what":"later 0.7.5","title":"later 0.7.5","text":"CRAN release: 2018-09-18 Fixed issue order callbacks scheduled native later::later nondeterministic scheduled quickly. callbacks sorted time come due, identical. Later now uses order insertion tiebreaker. PR #69","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-074","dir":"Changelog","previous_headings":"","what":"later 0.7.4","title":"later 0.7.4","text":"CRAN release: 2018-08-31 Fixed issue #45 #63: glibc 2.28 musl (used Arch Alpine Linux) added support C11-style threads.h, masked functions tinycthread library used later. Later now detects support threads.h uses available; otherwise uses tinycthread. PR #64","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-073","dir":"Changelog","previous_headings":"","what":"later 0.7.3","title":"later 0.7.3","text":"CRAN release: 2018-06-08 Fixed issue #57: user interrupt occurred later (internally) called sys.nframe(), R process crash. PR #58","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-072","dir":"Changelog","previous_headings":"","what":"later 0.7.2","title":"later 0.7.2","text":"CRAN release: 2018-05-01 Fixed issue #48: Occasional timedwait errors later::run_now. Thanks, @vnijs! PR #49 Fixed build warning OS X 10.11 earlier. PR #54","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-071","dir":"Changelog","previous_headings":"","what":"later 0.7.1","title":"later 0.7.1","text":"CRAN release: 2018-03-07 Fixed issue #39: Calling C++ function later::later() different thread cause R GC event occur thread, leading memory corruption. PR #40 Decrease latency repeated top-level execution.","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-07-unreleased","dir":"Changelog","previous_headings":"","what":"later 0.7 (unreleased)","title":"later 0.7 (unreleased)","text":"Fixed issue #22: GC events cause error message: Error: unimplemented type 'integer' 'coerceToInteger'. PR #23 Fixed issues #25, #29, #31: errors occurred callbacks executed R’s input handler (opposed run_now()), properly handled R put terminal problematic state. PR #33 Fixed issue #37: High CPU usage Linux. PR #38 Fixed issue #36: Failure build OS X <=10.12 (thanks @mingwandroid). PR #21","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-06","dir":"Changelog","previous_headings":"","what":"later 0.6","title":"later 0.6","text":"CRAN release: 2017-11-04 Fix hang address sanitized (ASAN) builds R. Issue #16, PR #17 run_now() function now takes timeoutSecs argument. tasks ready run time run_now(timeoutSecs) invoked, wait timeoutSecs one become ready. default value 0 means run_now() return immediately tasks ready, behavior previous releases. PR #19 run_now() function used return unable find tasks due. means tasks scheduled interval faster tasks executed, run_now() never return. release changes behavior timestamp taken run_now() begins executing, tasks whose timestamps earlier equal run. PR #18 Fix compilation errors Solaris. Reported Brian Ripley. PR #20","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-05","dir":"Changelog","previous_headings":"","what":"later 0.5","title":"later 0.5","text":"CRAN release: 2017-10-05 Fix hang Fedora 25+ prevented package installed successfully. Reported @lepennec. Issue #7, PR #10 Fixed issue #12: exception occurred callback function, cause future callbacks execute. PR #13 Added next_op_secs() function report number seconds next scheduled operation. PR #15","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-04","dir":"Changelog","previous_headings":"","what":"later 0.4","title":"later 0.4","text":"CRAN release: 2017-08-23 Add loop_empty() function, returns TRUE currently callbacks scheduled execute present future. POSIX platforms, fix issue socket connections hang written /read later callback scheduled. fix required stopping input handler called several spurious situations: 1) callbacks already run, 2) R code busy executing (used try often possible, now space bit), 3) scheduled callbacks future. accomplish , use background thread acts like timer poke file descriptor whenever input handler needs run–similar already Windows. Issue #4 platforms, don’t invoke callbacks callbacks already invoked (unless explicitly requested caller run_now()).","code":""},{"path":"https://later.r-lib.org/dev/news/index.html","id":"later-03","dir":"Changelog","previous_headings":"","what":"later 0.3","title":"later 0.3","text":"CRAN release: 2017-06-25 Initial release.","code":""}]
